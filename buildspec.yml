# Do not change version. This is the version of aws buildspec, not the version of your buldspec file.
version: 0.2

env:
  variables:
#    DEPLOY_CONFIG: <Defined in AWS Code Build>
    DEPLOY_DIR: "/km_deployment/ui/"
    BUILD_ZIP: "build.zip"
#    CI_USER: <Defined in AWS Code Build>
    PEM_FILE: "../../ci/ssh/bumed-web-srv.pem"

phases:
  build:
    commands:
      #    install npm
      - cd web
      - npm install
      #    build app
      - echo "$DEPLOY_CONFIG"
      - npm run build:$DEPLOY_CONFIG
      #    set up dependencies
      - apt-get update
      - apt-get install zip openssh-client git -qq
      #    start ssh client and set up key
      - eval $(ssh-agent -s)
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - chmod 700 ../ci/ssh/bumed-web-srv.pem
#      - echo "$SSH_PKEY"
#      - echo "$SSH_PKEY" | tr -d '\r' | ssh-add
#      - echo $SSH_PKEY>../ci/ssh/bumed-web-srv.pem
#      - ssh-add .\ci\ssh\bumed-web-srv.pem
      #    create zip
      - cd build
      - zip -r $BUILD_ZIP .
  post_build:
    commands:
      - echo "Printing Variables"
      - echo "$CI_BUILDS_DIR"
      - echo "$DEPLOY_DIR"
      - echo "$BUILD_ZIP"
      - echo "$CI_USER"
      #    make sure we have permission to write
      - ssh -i $PEM_FILE -o StrictHostKeyChecking=no $CI_USER "sudo setfacl -R -m u:ec2-user:rwx $DEPLOY_DIR"
      #    clear deploy dir
      - ssh -i $PEM_FILE -o StrictHostKeyChecking=no $CI_USER "sudo rm -r $DEPLOY_DIR/*"
      #    deploy zip
      - scp -i $PEM_FILE -o StrictHostKeyChecking=no $BUILD_ZIP $CI_USER:$DEPLOY_DIR
      #    unzip files
      - ssh -i $PEM_FILE -o StrictHostKeyChecking=no $CI_USER "cd $DEPLOY_DIR; sudo unzip -o $BUILD_ZIP"
      #    remove zip file
      - ssh -i $PEM_FILE -o StrictHostKeyChecking=no $CI_USER "cd $DEPLOY_DIR; sudo rm build.zip"


#image: node:12.16.2
#
#variables:
#  CI_BUILDS_DIR: "bumed/build/"
#  DEPLOY_DIR: "/opt/apps/kmweb"
#  SSH_PKEY: $SSH_PRIVATE_KEY
#  BUILD_ZIP: build.zip
#
#stages:
#  - deploy
#
##build and deploy
#deploy:
#  stage: deploy
#  when: always
#  only:
#    - main
##  when: on_success
#  before_script:
##    install npm
#    - cd web
#    - npm install
##    build app
#    - npm run remote-build
##    set up dependencies
#    - apt-get update
#    - apt-get install zip openssh-client git -qq
##    start ssh client and set up key
#    - eval $(ssh-agent -s)
#    - echo "$SSH_PKEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
##    create zip
#    - cd build
#    - zip -r $BUILD_ZIP .
#  script:
##    make sure we have permission to write
#    - ssh -o StrictHostKeyChecking=no $CI_USER "sudo setfacl -R -m u:ec2-user:rwx $DEPLOY_DIR"
##    clear deploy dir
#    - ssh -o StrictHostKeyChecking=no $CI_USER "sudo rm -r $DEPLOY_DIR/*"
##    deploy zip
#    - scp -o StrictHostKeyChecking=no $BUILD_ZIP $CI_USER:$DEPLOY_DIR
##    unzip files
#    - ssh -o StrictHostKeyChecking=no $CI_USER "cd $DEPLOY_DIR; sudo unzip -o $BUILD_ZIP"
##    remove zip file
#    - ssh -o StrictHostKeyChecking=no $CI_USER "cd $DEPLOY_DIR; sudo rm build.zip"
#
##deploy:
##  stage: deploy
##  tags:
##    - windows
##  script:
##    - npm run build
# #   - echo $CI_BUILDS_DIR
# #   - xcopy *\* "\Apache\Apache24\htdocs" /s /e
#  #  - tar.exe -a -c -f "..\PLBuild.zip" *.*
##  only:
# #   - master
## Publish tagged versions to npm
#  #publish:
#  #stage: deploy
#    #script:
#    #- npm run build
#    #- echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}'>.npmrc
#    #- npm publish
